{
  "comments": [
    {
      "key": {
        "uuid": "1ce68b80_adf042a6",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/uploadvalidator/BlockedKeywordValidator.java",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2017-04-11T09:54:20Z",
      "side": 1,
      "message": "This is now unused?\n\nThis means any plugin configuration regarding which mime types should be considered as binary files is ignored now. Not sure if this feature (being able to configure which mime types are considered binary) is needed, but if we no longer support this, the commit message should mention this and also the documentation in config.md should be adapted.",
      "range": {
        "startLine": 156,
        "startChar": 19,
        "endLine": 156,
        "endChar": 22
      },
      "revId": "2a5e00b6b71b54157b0800b54cb6b00869eb5898",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4fb73429_804f2416",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/uploadvalidator/BlockedKeywordValidator.java",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1019952
      },
      "writtenOn": "2017-04-11T16:45:28Z",
      "side": 1,
      "message": "Hm. I would like to get rid of it, but I also don\u0027t want to get rid of support for currently existing things. \n\nI think my desire not to break things supersedes my desire for cleanliness. I don\u0027t know whether RawText.isBinary is flawless or not, and it\u0027s probably better to give users more options rather than less.\n\nAdded the contentTypeUtil.isBinary check back in, in addition to the RawText.isBinary check.",
      "parentUuid": "1ce68b80_adf042a6",
      "range": {
        "startLine": 156,
        "startChar": 19,
        "endLine": 156,
        "endChar": 22
      },
      "revId": "2a5e00b6b71b54157b0800b54cb6b00869eb5898",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d362428c_155df525",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/uploadvalidator/BlockedKeywordValidator.java",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2017-04-11T17:26:14Z",
      "side": 1,
      "message": "I think it makes sense to get rid of it. Do we know of anyone using it? (E.g. do commit messages when it was introduced point to any users? Is there anyone we can cc to find out what they need?)\n\nIn particular, the MimeUtil2 based detection has a serious flaw: anything it doesn\u0027t recognize is considered binary, which hurts the validation that e.g. BlockedKeyworkValidator wants to do.",
      "parentUuid": "4fb73429_804f2416",
      "range": {
        "startLine": 156,
        "startChar": 19,
        "endLine": 156,
        "endChar": 22
      },
      "revId": "2a5e00b6b71b54157b0800b54cb6b00869eb5898",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f076c76_d1c53392",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/uploadvalidator/BlockedKeywordValidator.java",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1019952
      },
      "writtenOn": "2017-04-11T17:36:59Z",
      "side": 1,
      "message": "It was introduced by Pascal Krause in https://gerrit-review.googlesource.com/#/c/76268/ but his account is inactive.\n\nAdded zivkov@gmail.com as he was a reviewer on it in case he has any input.",
      "parentUuid": "d362428c_155df525",
      "range": {
        "startLine": 156,
        "startChar": 19,
        "endLine": 156,
        "endChar": 22
      },
      "revId": "2a5e00b6b71b54157b0800b54cb6b00869eb5898",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cb10c3d_f465b023",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/uploadvalidator/BlockedKeywordValidator.java",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1019952
      },
      "writtenOn": "2017-04-11T17:42:50Z",
      "side": 1,
      "message": "To your first point: Not sure, the committer appears to have an inactive account now. It would be nice to get rid of just so we don\u0027t have two things doing the same thing...but I\u0027m skittish of breaking existing functionality. On the other hand, that\u0027s what versioning and history is for :P\n\nTo your second point: sure, that\u0027s why I\u0027m proposing keeping both.\n\n1) Use RawText.isBinary\n2) If that\u0027s false, check if it\u0027s a blacklisted content type.",
      "parentUuid": "d362428c_155df525",
      "range": {
        "startLine": 156,
        "startChar": 19,
        "endLine": 156,
        "endChar": 22
      },
      "revId": "2a5e00b6b71b54157b0800b54cb6b00869eb5898",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbf8f345_0c4147c3",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/uploadvalidator/BlockedKeywordValidator.java",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-04-11T18:38:47Z",
      "side": 1,
      "message": "It may be that someone at SAP is using it. I advertised the uploadvalidator plugin some time\nago and encouraged Gerrit users to get familiar with its features and make use of them.\n\nThe RawText.isBinary may be flawless... but what if it is not? What is a short-term\nmitigation when someone cannot push because RawText.isBinary returns a wrong result?",
      "parentUuid": "5cb10c3d_f465b023",
      "range": {
        "startLine": 156,
        "startChar": 19,
        "endLine": 156,
        "endChar": 22
      },
      "revId": "2a5e00b6b71b54157b0800b54cb6b00869eb5898",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8a92477_42cfb17c",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/uploadvalidator/BlockedKeywordValidator.java",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-04-11T18:53:34Z",
      "side": 1,
      "message": "Answering my own question: we discussed the idea of implementing a per-commit upload validation exception.\nIf a commit needs to bypass upload validation, a project owner would first push a Git note for that commit on the refs/notes/uploadvalidator branch. Upload validation is then skipped for a commit which has a note on that branch.\nThis mechanism could be used when RawText.isBinary returns wrong result.\n\nOpinions?",
      "parentUuid": "dbf8f345_0c4147c3",
      "range": {
        "startLine": 156,
        "startChar": 19,
        "endLine": 156,
        "endChar": 22
      },
      "revId": "2a5e00b6b71b54157b0800b54cb6b00869eb5898",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d17ce9a1_db12b165",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/uploadvalidator/BlockedKeywordValidator.java",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1019952
      },
      "writtenOn": "2017-04-11T18:59:26Z",
      "side": 1,
      "message": "Not 100% sure how it works, but could that cause problems if the commit strategy is cherry-pick or rebase? If the note is on the SHA that\u0027s been uploaded for review, the uploadvalidator may still block it for the SHA that is actually being submitted into the Git repo.\n\nOr do notes get propagated along?",
      "parentUuid": "d8a92477_42cfb17c",
      "range": {
        "startLine": 156,
        "startChar": 19,
        "endLine": 156,
        "endChar": 22
      },
      "revId": "2a5e00b6b71b54157b0800b54cb6b00869eb5898",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7099ed3e_b3126c73",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/uploadvalidator/BlockedKeywordValidator.java",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-04-11T19:01:59Z",
      "side": 1,
      "message": "The upload validation happens on upload, not on submit.\nUpload validation is independent from the submit strategy.",
      "parentUuid": "d17ce9a1_db12b165",
      "range": {
        "startLine": 156,
        "startChar": 19,
        "endLine": 156,
        "endChar": 22
      },
      "revId": "2a5e00b6b71b54157b0800b54cb6b00869eb5898",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6abedb8c_c633d803",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/uploadvalidator/BlockedKeywordValidator.java",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2017-04-11T19:07:29Z",
      "side": 1,
      "message": "I don\u0027t think flawless is the right way to frame it. RawText.isBinary implements a particular very simplistic heuristic for detecting binary files: whether the first 8k contains any NUL bytes. The question is whether that heuristic is appropriate for your application.",
      "parentUuid": "7099ed3e_b3126c73",
      "range": {
        "startLine": 156,
        "startChar": 19,
        "endLine": 156,
        "endChar": 22
      },
      "revId": "2a5e00b6b71b54157b0800b54cb6b00869eb5898",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce893fa8_abc22ae2",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/uploadvalidator/BlockedKeywordValidator.java",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1019952
      },
      "writtenOn": "2017-04-11T19:26:43Z",
      "side": 1,
      "message": "Ah, you\u0027re right. Sounds like we could potentially make that work then.\n\nIt seems like it requires a project owner to have access to the Git commit first though (since I don\u0027t believe you can annotate a commit that you haven\u0027t seen before?). So a non-project owner would have to upload their change somewhere for the project owner to download, annotate, then upload for review, which seems painful.\n\nMaybe instead of that we could have a whitelistedCommits config option? Much less elegant, but it means that a project owner only has to know the string value of the commit SHA that the non-project owner is trying to upload.",
      "parentUuid": "7099ed3e_b3126c73",
      "range": {
        "startLine": 156,
        "startChar": 19,
        "endLine": 156,
        "endChar": 22
      },
      "revId": "2a5e00b6b71b54157b0800b54cb6b00869eb5898",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03d808eb_6b998318",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/uploadvalidator/BlockedKeywordValidator.java",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-04-11T19:29:43Z",
      "side": 1,
      "message": "\u003e The question is whether that heuristic is appropriate for your application.\n\nIt is hard to tell. I guess that most of binary files will have a NUL in the first 8K bytes.\nBut this is not my main concern. With giving up the explicit list of binary types we need another\nway to bypass upload validation for some files/commits.",
      "parentUuid": "6abedb8c_c633d803",
      "range": {
        "startLine": 156,
        "startChar": 19,
        "endLine": 156,
        "endChar": 22
      },
      "revId": "2a5e00b6b71b54157b0800b54cb6b00869eb5898",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c483632b_b3eea458",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/uploadvalidator/BlockedKeywordValidator.java",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-04-11T19:33:06Z",
      "side": 1,
      "message": "\u003e Ah, you\u0027re right. Sounds like we could potentially make that work\n \u003e then.\n \u003e \n \u003e It seems like it requires a project owner to have access to the Git\n \u003e commit first though (since I don\u0027t believe you can annotate a\n \u003e commit that you haven\u0027t seen before?).\n\nI don\u0027t think that this is a precondition. Knowing the commit SHA1\nis enough to create a note.\n\n\u003e So a non-project owner would\n \u003e have to upload their change somewhere for the project owner to\n \u003e download, annotate, then upload for review, which seems painful.\n\nNo. Just communicating the commit SHA1 should to the project owner\nshould be enough.\n\n \u003e \n \u003e Maybe instead of that we could have a whitelistedCommits config\n \u003e option?\n\nThe notes on refs/notes/uploadvalidator are exactly that white list :-)\nIn addition, using Gerrit\u0027s access rights it can be precisely controlled\nwho is allowed to push to refs/notes/uploadvalidator.\n\n\n\u003e Much less elegant, but it means that a project owner only\n \u003e has to know the string value of the commit SHA that the non-project\n \u003e owner is trying to upload.",
      "parentUuid": "ce893fa8_abc22ae2",
      "range": {
        "startLine": 156,
        "startChar": 19,
        "endLine": 156,
        "endChar": 22
      },
      "revId": "2a5e00b6b71b54157b0800b54cb6b00869eb5898",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54e7e8b6_d2cad287",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/uploadvalidator/BlockedKeywordValidator.java",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1019952
      },
      "writtenOn": "2017-04-11T19:41:52Z",
      "side": 1,
      "message": "Is the idea to create the git note on the object that hasn\u0027t been uploaded for review yet? Because we\u0027d get something like:\n\nGIT_NOTES_REF\u003drefs/notes/uploadvalidator git notes add c99aada9c4fa645b525113fe9d1c8a91a8e705d9\nfatal: bad object c99aada9c4fa645b525113fe9d1c8a91a8e705d9\nfatal: failed to finish \u0027show\u0027 for object \u0027c99aada9c4fa645b525113fe9d1c8a91a8e705d9\u0027\n\n\nOr is the idea to create the git note on HEAD? In which case `git notes list` gives us a list of all the notes in history, and we\u0027d have to iterate through all of them to see if it\u0027s whitelisted?\n\n\nI feel like I\u0027m missing something super obvious (which is entirely possible, given I\u0027m unfamiliar with git notes)",
      "parentUuid": "c483632b_b3eea458",
      "range": {
        "startLine": 156,
        "startChar": 19,
        "endLine": 156,
        "endChar": 22
      },
      "revId": "2a5e00b6b71b54157b0800b54cb6b00869eb5898",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e57fd83_617a8989",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/uploadvalidator/BlockedKeywordValidator.java",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1019952
      },
      "writtenOn": "2017-04-11T19:43:19Z",
      "side": 1,
      "message": "The git note on HEAD could look something like:\n\nSkipValidation\u003dc99aada9c4fa645b525113fe9d1c8a91a8e705d9\n\nbut we\u0027d have to do a `git notes show` on each note in `git notes list` in order to make sure that we get all the whitelisted SHAs...",
      "parentUuid": "54e7e8b6_d2cad287",
      "range": {
        "startLine": 156,
        "startChar": 19,
        "endLine": 156,
        "endChar": 22
      },
      "revId": "2a5e00b6b71b54157b0800b54cb6b00869eb5898",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f615d583_d99f628b",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/uploadvalidator/BlockedKeywordValidator.java",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-04-11T20:03:48Z",
      "side": 1,
      "message": "\u003e Is the idea to create the git note on the object that hasn\u0027t been\n \u003e uploaded for review yet? Because we\u0027d get something like:\n \u003e \n \u003e GIT_NOTES_REF\u003drefs/notes/uploadvalidator git notes add\n \u003e c99aada9c4fa645b525113fe9d1c8a91a8e705d9\n \u003e fatal: bad object c99aada9c4fa645b525113fe9d1c8a91a8e705d9\n \u003e fatal: failed to finish \u0027show\u0027 for object \u0027c99aada9c4fa645b525113fe9d1c8a91a8e705d9\u0027\n\nLooks like my assumption that this would just work was wrong.\nLikely, we could create such a note with lower level Git commands\nbut this could be too much to expect from project owners.\n\n \u003e \n \u003e \n \u003e Or is the idea to create the git note on HEAD? In which case `git\n \u003e notes list` gives us a list of all the notes in history, and we\u0027d\n \u003e have to iterate through all of them to see if it\u0027s whitelisted?\n \u003e \n \u003e \n \u003e I feel like I\u0027m missing something super obvious (which is entirely\n \u003e possible, given I\u0027m unfamiliar with git notes)\n\nIf it turns out that creation of such notes on the client side is too\ndifficult, we could expose a REST endpoint (and an SSH command too)\nfor creating such notes directly in the shared repo in Gerrit.\nIIRC, the ban-commit command [1] does exactly that.\n\nI think that, at least, we agree on having a white list of commits\nfor which upload validation is skipped. If it tuns out that the solution with Git notes is inappropriate we can think of a different representation\nof that list.\n\n[1] https://gerrit-review.googlesource.com/Documentation/cmd-ban-commit.html",
      "parentUuid": "54e7e8b6_d2cad287",
      "range": {
        "startLine": 156,
        "startChar": 19,
        "endLine": 156,
        "endChar": 22
      },
      "revId": "2a5e00b6b71b54157b0800b54cb6b00869eb5898",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}