{
  "comments": [
    {
      "key": {
        "uuid": "60b3eb52_953b4e85",
        "filename": "BUILD",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-26T05:27:15Z",
      "side": 1,
      "message": "Nit: Indentation is not Bazel conform. There is buildifier utility available. Just run this file through it.",
      "revId": "89ef1944c3751c25ad20cef94a2481753c9be6f6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "42dc2ac8_02b23243",
        "filename": "BUILD",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-01-26T07:35:53Z",
      "side": 1,
      "message": "Thanks, installing it :-)\nUnfortunately there isn\u0027t a brew formula for it ... need to build from source, which is pitty :-(",
      "revId": "89ef1944c3751c25ad20cef94a2481753c9be6f6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "235040d6_dbadbeea",
        "filename": "BUILD",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-26T05:27:15Z",
      "side": 1,
      "message": "Not needed as the gerrit_plugin() already adds it.",
      "range": {
        "startLine": 10,
        "startChar": 4,
        "endLine": 10,
        "endChar": 29
      },
      "revId": "89ef1944c3751c25ad20cef94a2481753c9be6f6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84215ee5_eea89c13",
        "filename": "BUILD",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-01-26T07:35:53Z",
      "side": 1,
      "message": "Cool !",
      "range": {
        "startLine": 10,
        "startChar": 4,
        "endLine": 10,
        "endChar": 29
      },
      "revId": "89ef1944c3751c25ad20cef94a2481753c9be6f6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c63ee533_d69a86d3",
        "filename": "WORKSPACE",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-01-26T00:23:32Z",
      "side": 1,
      "message": "@DavidO How did you manage to sort out the merging of the Gerrit WORKSPACE with the one provided by the plugin?\n\nThe simplest idea could be just appending to it in the build script ... but honestly s**ks a lot.",
      "revId": "89ef1944c3751c25ad20cef94a2481753c9be6f6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c16a584c_44d5fb72",
        "filename": "WORKSPACE",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-26T05:27:15Z",
      "side": 1,
      "message": "Yes you are right, it sucks indeed. I created 2 different issues upstream for exact that problem: [1], [2].\n\nSo the way to go for now, is to provide complete standalone build for now, based on bazlets. The advantage here is, we do not need to add bazlets as a git submodule as it was the the case with bucklets. In addition we are adding a part of WORKSPACE in own file and called it WORKSPACE.in_gerrit_tree: [3]. \n\n* [1] https://github.com/bazelbuild/bazel/issues/2224\n* [2] https://github.com/bazelbuild/bazel/issues/2391\n* [3] https://github.com/davido/gerrit-oauth-provider/blob/master/WORKSPACE.in_gerrit_tree",
      "revId": "89ef1944c3751c25ad20cef94a2481753c9be6f6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a30cad50_2fc4df4f",
        "filename": "WORKSPACE",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-01-26T07:35:53Z",
      "side": 1,
      "message": "I\u0027m glad that you lead the path and started to remove the stones ... but unfortunately in both ways you encountered blocking issues in Bazel :-(\n\nI posted a message to the [1] to ask to escalate the priority: currently P3 that means ... how many days / weeks / months / years to go?\n\nWe need an *urgent* solution as all the plugins do need a working build on the master branch. \n\nI believe then that [3] is the only (currently) viable option, isn\u0027t it?",
      "revId": "89ef1944c3751c25ad20cef94a2481753c9be6f6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5811457f_f20289cb",
        "filename": "WORKSPACE",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-26T09:26:46Z",
      "side": 1,
      "message": "\u003e I\u0027m glad that you lead the path and started to remove the stones\n \u003e ... but unfortunately in both ways you encountered blocking issues\n \u003e in Bazel :-(\n\nIn fact I considered them blocking issue first and even added this issue: [1] as backing issue to the Buck removal change first. But. given that there is numbers of workarounds, see the list of them in the issue above, i removed the blocking bit too move forward with Bazel only and leave Buck behind us.\n\n \u003e I believe then that [3] is the only (currently) viable option, isn\u0027t it?\n\nNot really, we have standalone build as well. and concerning [3], we could do a better jobs here, provide much simpler workaround. My idea is 8just haven\u0027t time to implement it):\n\n* 1 Expose plugins/external_plugin_deps.bzl skylark rule in Gerrit tree and add there new method:\n\n  def external_plugin_deps():\n    pass\n\n* 2. Include this file in Gerrit\u0027s own WORKSPACE file:\n\n  load(\"//plugins:external_plugin_deps.bzl\", \"external_plugin_deps\")\n\n* 3. invoke the no op method in Gerrit\u0027s own WORKSPACE file:\n\n  external_plugin_deps()\n\n* 4. in all plugins, that have external dependencies, extract them in the file called external_plugin_deps.bzl in the root directory of the plugin, and include this file from the plugin\u0027s own WORKSPACE. The way the standalone build ill just work.\n\n* 5. Wie in Gerrit tree build is needed, there are two steps:\n* 5.1. Clone the plugin into plugins directory in Gerrit tree\n* 5.2. Copy \u003cplugin-foo/\u003eexternal_plugin_deps.bzl to \u003cgerrit-root\u003e/plugins/external_plugin_deps.bzl\n\nAs example, external_plugin_deps.bzl of this plugin would be:\n\ndef external_plugin_deps():\n  maven_jar(\n      name \u003d \u0027commons_io_commons_io\u0027,\n      artifact \u003d \u0027commons-io:commons-io:1.4\u0027,\n      sha1 \u003d \u0027a8762d07e76cfde2395257a5da47ba7c1dbd3dce\u0027,\n  )\n\n  maven_jar(\n      name \u003d \u0027org_apache_tika_tika_core\u0027,\n      artifact \u003d \u0027org.apache.tika:tika-core:1.12\u0027,\n      sha1 \u003d \u00275ab95580d22fe1dee79cffbcd98bb509a32da09b\u0027,\n  )\n\n* [1] https://bugs.chromium.org/p/gerrit/issues/detail?id\u003d5305",
      "revId": "89ef1944c3751c25ad20cef94a2481753c9be6f6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "532692e8_0045105e",
        "filename": "WORKSPACE",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-26T09:33:48Z",
      "side": 1,
      "message": "One problem with the approach above, if you need to build number of plugins with external dependencies in the same time, then you would need to merge multiple external_plugin_deps methods provided by different plugins.\n\nSay its-base would also have external dependencies (it hasn\u0027t atm) and of course its-jura has a lot external dependencies. So to compile both plugins, you have to clone them both into plugins, and would have to merge both file in one.\n\nBut then again. What always work is to have standalone build. In the example above. You could publish results of the its-base in context of standalone build into local Maven repository, then pull them from there in its-* projects. That makes the life not easier, surely.",
      "revId": "89ef1944c3751c25ad20cef94a2481753c9be6f6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4df41f2a_28e7ec83",
        "filename": "WORKSPACE",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-01-26T10:11:58Z",
      "side": 1,
      "message": "\u003e Not really, we have standalone build as well.\n\nmmm ... but the standalone build wouldn\u0027t be the best option for the master branch, because the API aren\u0027t published on Maven.\n\n\u003e and concerning [3], we could do a better jobs here, provide much simpler workaround. My idea is 8just haven\u0027t time to implement it):\n\u003e \n\u003e * 1 Expose plugins/external_plugin_deps.bzl skylark rule in Gerrit tree and add there new method:\n\u003e \n\u003e   def external_plugin_deps():\n\u003e     pass\n\nmmm ... interesting :-)\n\n\u003e \n\u003e * 2. Include this file in Gerrit\u0027s own WORKSPACE file:\n\u003e \n\u003e   load(\"//plugins:external_plugin_deps.bzl\", \"external_plugin_deps\")\n\nHold on, not a single one but one per plugin, correct? We may have multiple plugins in the Gerrit tree for development.\n\n\u003e \n\u003e * 3. invoke the no op method in Gerrit\u0027s own WORKSPACE file:\n\u003e \n\u003e   external_plugin_deps()\n\nYes, I know where you want to go and I like it :-)\n\n\u003e \n\u003e * 4. in all plugins, that have external dependencies, extract them in the file called external_plugin_deps.bzl in the root directory of the plugin, and include this file from the plugin\u0027s own WORKSPACE. The way the standalone build ill just work.\n\nDefinitely like it ... let me work on it.\n\n\u003e \n\u003e * 5. Wie in Gerrit tree build is needed, there are two steps:\n\u003e * 5.1. Clone the plugin into plugins directory in Gerrit tree\n\u003e * 5.2. Copy \u003cplugin-foo/\u003eexternal_plugin_deps.bzl to \u003cgerrit-root\u003e/plugins/external_plugin_deps.bzl\n\u003e \n\u003e As example, external_plugin_deps.bzl of this plugin would be:\n\u003e \n\u003e def external_plugin_deps():\n\u003e   maven_jar(\n\u003e       name \u003d \u0027commons_io_commons_io\u0027,\n\u003e       artifact \u003d \u0027commons-io:commons-io:1.4\u0027,\n\u003e       sha1 \u003d \u0027a8762d07e76cfde2395257a5da47ba7c1dbd3dce\u0027,\n\u003e   )\n\u003e \n\u003e   maven_jar(\n\u003e       name \u003d \u0027org_apache_tika_tika_core\u0027,\n\u003e       artifact \u003d \u0027org.apache.tika:tika-core:1.12\u0027,\n\u003e       sha1 \u003d \u00275ab95580d22fe1dee79cffbcd98bb509a32da09b\u0027,\n\u003e   )\n\u003e \n\u003e * [1] https://bugs.chromium.org/p/gerrit/issues/detail?id\u003d5305\n\nLet me explore this option as well, thanks for sharing it :-)",
      "revId": "89ef1944c3751c25ad20cef94a2481753c9be6f6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ac9c1f7_92bc06d7",
        "filename": "WORKSPACE",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-01-26T10:11:58Z",
      "side": 1,
      "message": "\u003e One problem with the approach above, if you need to build number of plugins with external dependencies in the same time, then you would need to merge multiple external_plugin_deps methods provided by different plugins.\n\nOh yes, that isn\u0027t good at all. What\u0027s worse is that multiple plugins may easily have multiple versions of the same library ... and that would potentially conflict.\n\n\n\u003e Say its-base would also have external dependencies (it hasn\u0027t atm) and of course its-jura has a lot external dependencies. So to compile both plugins, you have to clone them both into plugins, and would have to merge both file in one.\n\nOK, that\u0027s not a big problem because both plugins are part of the same \"suite\". What\u0027s even worse is the scenario I\u0027ve depicted before.\n\n\u003e But then again. What always work is to have standalone build. In the example above. You could publish results of the its-base in context of standalone build into local Maven repository, then pull them from there in its-* projects. That makes the life not easier, surely.\n\nFor a release build would work, but during development would just kill the productivity :-(",
      "revId": "89ef1944c3751c25ad20cef94a2481753c9be6f6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a9578e16_11c794dc",
        "filename": "WORKSPACE",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-01-26T14:29:58Z",
      "side": 1,
      "message": "Done, what do you think?",
      "revId": "89ef1944c3751c25ad20cef94a2481753c9be6f6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d89cf25e_c0c9fa26",
        "filename": "WORKSPACE",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-26T09:26:46Z",
      "side": 1,
      "message": "Nit: run buildifier on this file too.",
      "range": {
        "startLine": 2,
        "startChar": 0,
        "endLine": 12,
        "endChar": 1
      },
      "revId": "89ef1944c3751c25ad20cef94a2481753c9be6f6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}