{
  "comments": [
    {
      "key": {
        "uuid": "63d6bd38_16145c67",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/uploadvalidator/ValidatorConfig.java",
        "patchSetId": 5
      },
      "lineNbr": 56,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-01-16T16:58:38Z",
      "side": 1,
      "message": "unrelated variable rename, revert",
      "range": {
        "startLine": 56,
        "startChar": 17,
        "endLine": 56,
        "endChar": 29
      },
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63d6bd38_1660dcdd",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/uploadvalidator/ValidatorConfig.java",
        "patchSetId": 5
      },
      "lineNbr": 56,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-01-16T22:44:44Z",
      "side": 1,
      "message": "Done",
      "range": {
        "startLine": 56,
        "startChar": 17,
        "endLine": 56,
        "endChar": 29
      },
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63d6bd38_560ad447",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/uploadvalidator/ValidatorConfig.java",
        "patchSetId": 5
      },
      "lineNbr": 84,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-01-16T16:58:38Z",
      "side": 1,
      "message": "either rename this is branchName or rename the method to canSkipOnRef. I prefer the latter because the calling method also names this parameter refName.",
      "range": {
        "startLine": 84,
        "startChar": 13,
        "endLine": 84,
        "endChar": 20
      },
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43d37948_b537e0fd",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/uploadvalidator/ValidatorConfig.java",
        "patchSetId": 5
      },
      "lineNbr": 84,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-01-16T22:44:44Z",
      "side": 1,
      "message": "Better renaming the method: done.",
      "range": {
        "startLine": 84,
        "startChar": 13,
        "endLine": 84,
        "endChar": 20
      },
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63d6bd38_562894a1",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/uploadvalidator/ValidatorConfig.java",
        "patchSetId": 5
      },
      "lineNbr": 98,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-01-16T16:58:38Z",
      "side": 1,
      "message": "Based on the documentation it makes no sense to check the skipBranch if the skipGroup list is empty?",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 98,
        "endChar": 5
      },
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43d37948_953ce4e2",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/uploadvalidator/ValidatorConfig.java",
        "patchSetId": 5
      },
      "lineNbr": 98,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-01-16T22:44:44Z",
      "side": 1,
      "message": "True, let me fix this.",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 98,
        "endChar": 5
      },
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63d6bd38_36ee383e",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/uploadvalidator/ValidatorConfig.java",
        "patchSetId": 5
      },
      "lineNbr": 103,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-01-16T16:58:38Z",
      "side": 1,
      "message": "Why name a boolean method starting with \"not\"? If a caller needs a negation of it then it becomes:\n\n  if (!notSkippableValidation(...))\n\nName this method isSkippableValidation and use ! at the calling place if necessary.",
      "range": {
        "startLine": 103,
        "startChar": 18,
        "endLine": 103,
        "endChar": 40
      },
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63d6bd38_f68b2076",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/uploadvalidator/ValidatorConfig.java",
        "patchSetId": 5
      },
      "lineNbr": 103,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-01-16T22:44:44Z",
      "side": 1,
      "message": "True, not nice to have a negation in the name. Done.",
      "range": {
        "startLine": 103,
        "startChar": 18,
        "endLine": 103,
        "endChar": 40
      },
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63d6bd38_56f1b41d",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/uploadvalidator/ValidatorConfig.java",
        "patchSetId": 5
      },
      "lineNbr": 112,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-01-16T16:58:38Z",
      "side": 1,
      "message": "Shall we for consistency with the rest of the code in this class use a for-loop here like in other places?\n\nAssuming the method is named \"isSkippableValidation\",  the lines 107-112 could be written as:\n\n  for (String s : skipValidations) {\n    if (s.equals(validatorOp)) {\n      return true;\n    }\n  }\n  return false;\n\nIt may not be a modern java 8 style but it looks more readable, IMHO.",
      "range": {
        "startLine": 111,
        "startChar": 0,
        "endLine": 112,
        "endChar": 48
      },
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43d37948_75526822",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/uploadvalidator/ValidatorConfig.java",
        "patchSetId": 5
      },
      "lineNbr": 112,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-01-16T22:44:44Z",
      "side": 1,
      "message": "No problem, done.",
      "range": {
        "startLine": 111,
        "startChar": 0,
        "endLine": 112,
        "endChar": 48
      },
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63d6bd38_b62008bd",
        "filename": "src/main/resources/Documentation/config.md",
        "patchSetId": 5
      },
      "lineNbr": 237,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-01-16T16:58:38Z",
      "side": 1,
      "message": "Group",
      "range": {
        "startLine": 237,
        "startChar": 15,
        "endLine": 237,
        "endChar": 41
      },
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43d37948_d51dbc94",
        "filename": "src/main/resources/Documentation/config.md",
        "patchSetId": 5
      },
      "lineNbr": 237,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-01-16T16:58:38Z",
      "side": 1,
      "message": "Do you really expect people to write UUIDs here like:\n\n  skipGroup \u003d 44ac6aaa343b36afbfe2259f15e695dc34f7c905\n\nI think this has to be a group name.",
      "range": {
        "startLine": 237,
        "startChar": 15,
        "endLine": 237,
        "endChar": 20
      },
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63d6bd38_d61b848f",
        "filename": "src/main/resources/Documentation/config.md",
        "patchSetId": 5
      },
      "lineNbr": 237,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-01-16T16:58:38Z",
      "side": 1,
      "message": "Is this a new convention?",
      "range": {
        "startLine": 237,
        "startChar": 2,
        "endLine": 237,
        "endChar": 14
      },
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63d6bd38_d69024a5",
        "filename": "src/main/resources/Documentation/config.md",
        "patchSetId": 5
      },
      "lineNbr": 237,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-01-16T22:44:44Z",
      "side": 1,
      "message": "I know the group UUIDs are not user-friendly, however, I believe for backend-based group lookups would be much better.\n\nName can be non-unique and, sometimes, not even implemented by the backend.\n\nI am expecting this configuration be used by Gerrit-admins and not exposed to end-users.",
      "range": {
        "startLine": 237,
        "startChar": 15,
        "endLine": 237,
        "endChar": 20
      },
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63d6bd38_b685a861",
        "filename": "src/main/resources/Documentation/config.md",
        "patchSetId": 5
      },
      "lineNbr": 237,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-01-16T22:44:44Z",
      "side": 1,
      "message": "Done",
      "range": {
        "startLine": 237,
        "startChar": 15,
        "endLine": 237,
        "endChar": 41
      },
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43d37948_554f6c76",
        "filename": "src/main/resources/Documentation/config.md",
        "patchSetId": 5
      },
      "lineNbr": 237,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-01-16T22:44:44Z",
      "side": 1,
      "message": "Not really, other parts of Gerrit Docs specify this statement:\n\"Multiple values are supported.\"",
      "range": {
        "startLine": 237,
        "startChar": 2,
        "endLine": 237,
        "endChar": 14
      },
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43d37948_759a6893",
        "filename": "src/main/resources/Documentation/config.md",
        "patchSetId": 5
      },
      "lineNbr": 237,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-01-17T09:44:49Z",
      "side": 1,
      "message": "\u003e I know the group UUIDs are not user-friendly, however, I believe for backend-based group lookups would be much better.\n\nIn project.config we already store just group names (access sections). \n\n\u003e \n\u003e Name can be non-unique and, sometimes, not even implemented by the backend.\n\nA group name is resolved to a UUID by looking up for that group name in the refs/meta/config:groups file. A group name may not be globally unique but is always\nuniquely resolved to an UUID within the context of a project.\n\nMaybe I don\u0027t understand what is the issue here but if group names are good for\naccess sections in the project.config file why are they not good enough for other sections\nin the same file?\n\n\u003e \n\u003e I am expecting this configuration be used by Gerrit-admins and not exposed to end-users.\n\nproject.config (and later uploadvalidator.config) are project local. Therefore, it is not only\nadmins but also project owners who will be dealing with these files.",
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2864a22d_f4cb58fe",
        "filename": "src/main/resources/Documentation/config.md",
        "patchSetId": 5
      },
      "lineNbr": 237,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-01-20T01:06:48Z",
      "side": 1,
      "message": "\u003e A group name is resolved to a UUID by looking up for that group\n \u003e name in the refs/meta/config:groups file. A group name may not be\n \u003e globally unique but is always\n \u003e uniquely resolved to an UUID within the context of a project.\n\nNot necessarily: a group could be resolved by an external plugin and then not even exist in the refs/meta/config:groups file.\n\nI know it is not really user-friendly, but I can\u0027t see a simpler way to do it at the moment :-(\n\nAny bright ideas?\n\n \u003e \n \u003e Maybe I don\u0027t understand what is the issue here but if group names\n \u003e are good for\n \u003e access sections in the project.config file why are they not good\n \u003e enough for other sections\n \u003e in the same file?\n\nGood point :-) Let\u0027s investigate in Gerrit\u0027s code ...\n\n \u003e \n \u003e project.config (and later uploadvalidator.config) are project\n \u003e local. Therefore, it is not only\n \u003e admins but also project owners who will be dealing with these\n \u003e files.\n\nFair point, so I would say Gerrit admins + project admins.",
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "486b96ff_35d790a7",
        "filename": "src/main/resources/Documentation/config.md",
        "patchSetId": 5
      },
      "lineNbr": 237,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-01-20T01:34:22Z",
      "side": 1,
      "message": "\u003e \u003e Maybe I don\u0027t understand what is the issue here but if group\n \u003e names\n \u003e \u003e are good for\n \u003e \u003e access sections in the project.config file why are they not good\n \u003e \u003e enough for other sections\n \u003e \u003e in the same file?\n \u003e \n \u003e Good point :-) Let\u0027s investigate in Gerrit\u0027s code ...\n\nSo the logic is this one:\n- Group name is found in the groups table \u003d\u003e lookup the UUID and save the UUID\n- Group name NOT found in the groups table \u003d\u003e use the Universal Group Backend to get the Group Reference (UUID, Name)\n\nBear in mind that not all the Group Backends allow the full resolution and completion of the suggest() API. In that case just use it as UUID.\n\nShall we then just replicate the same logic?",
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "486b96ff_55732cc2",
        "filename": "src/main/resources/Documentation/config.md",
        "patchSetId": 5
      },
      "lineNbr": 237,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-01-20T12:35:27Z",
      "side": 1,
      "message": "Could you same me some time and post a link to the Gerrit core code you are referring to?\n\n\u003e Shall we then just replicate the same logic?\n\nI would say yes. Imagine the confusion for project owners who edit project.config, copy a group name from an access section to the [plugin \"uploadvalidator\"] section and finding out that this doesn\u0027t work. Then asking on the mailing list and us having to explain that they have to find the UUID and use it. What would you think about a product which exposes such inconsistency to its users?",
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63d6bd38_762b90a0",
        "filename": "src/main/resources/Documentation/config.md",
        "patchSetId": 5
      },
      "lineNbr": 252,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-01-16T16:58:38Z",
      "side": 1,
      "message": "The list of allowed values for this option needs to be documented?",
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43d37948_354cf07f",
        "filename": "src/main/resources/Documentation/config.md",
        "patchSetId": 5
      },
      "lineNbr": 252,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-01-16T22:44:44Z",
      "side": 1,
      "message": "Done",
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43d37948_755f0852",
        "filename": "src/main/resources/Documentation/config.md",
        "patchSetId": 5
      },
      "lineNbr": 258,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-01-16T16:58:38Z",
      "side": 1,
      "message": "nit: trailing WS",
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63d6bd38_968aac6f",
        "filename": "src/main/resources/Documentation/config.md",
        "patchSetId": 5
      },
      "lineNbr": 258,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-01-16T22:44:44Z",
      "side": 1,
      "message": "Done",
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63d6bd38_161e9cda",
        "filename": "src/main/resources/Documentation/config.md",
        "patchSetId": 5
      },
      "lineNbr": 274,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-16T06:56:24Z",
      "side": 1,
      "message": "As pointed out in my previous comment, the configuration in gerrit.config doesn\u0027t allow you fine grained control on validation disabling.\n\nHow can you achieve in the example above, the differentiation on the disabling of checks for two groups:\n\n* ldap/ReleaseManagers\n* ldap/GerritAdmins\n\nfor two different projects:\n\n* foo\n* bar\n\nfor two different validation kinds:\n\n* blockedFileExtension\n* blockedContentType\n\nfor two different branches:\n\n* foo-stable-42\n* bar-stable-42\n\netc. like two different directories...\n\nThat why you need to move the plugin disabling configuration in its own config file to not have to use [plugin \"@PLUGIN@\"], and to be able to say that:\n\n  [filter \"project:foo branch:foo-stable-42\"]\n    commiter \u003d ldap/ReleaseManagers\n    disable \u003d blockedFileExtension\n\n  [filter \"project:bar branch:bar-stable-42\"]\n    commiter \u003d ldap/GerritAdmins\n    disable \u003d blockedContentType",
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d6bd38_96e86c85",
        "filename": "src/main/resources/Documentation/config.md",
        "patchSetId": 5
      },
      "lineNbr": 274,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-01-16T07:22:16Z",
      "side": 1,
      "message": "\u003e As pointed out in my previous comment, the configuration in\n \u003e gerrit.config doesn\u0027t allow you fine grained control on validation\n \u003e disabling.\n\nI know, however, the plugin correctly uses project.config: changing it to its own customised config (uploadvalidator.config) would require:\n\n- support for older config as fallback\n- reimplementation of the inheritance across projects\n- code refactoring\n\nI would like us to agree on this substantial refactoring first, and then to split the work. Our first goal was simply a global config to disable checks for a Gerrit group ... and we are now talking about refactoring the configuration file :-)\n\nAll good, but it is now a different scope :-)\n\n \u003e \n \u003e How can you achieve in the example above, the differentiation on\n \u003e the disabling of checks for two groups:\n \u003e \n \u003e * ldap/ReleaseManagers\n \u003e * ldap/GerritAdmins\n \u003e \n \u003e for two different projects:\n \u003e \n \u003e * foo\n \u003e * bar\n\nIt isn\u0027t currently possible with the plugin to target different configuration on a per-branch basis.\n\nIt\u0027s all good, but it\u0027s a different change IMHO.\n\n \u003e \n \u003e for two different validation kinds:\n \u003e \n \u003e * blockedFileExtension\n \u003e * blockedContentType\n \u003e \n \u003e for two different branches:\n \u003e \n \u003e * foo-stable-42\n \u003e * bar-stable-42\n \u003e \n \u003e etc. like two different directories...\n \u003e \n \u003e That why you need to move the plugin disabling configuration in its\n \u003e own config file to not have to use [plugin \"@PLUGIN@\"], and to be\n \u003e able to say that:\n \u003e \n \u003e [filter \"project:foo branch:foo-stable-42\"]\n \u003e commiter \u003d ldap/ReleaseManagers\n \u003e disable \u003d blockedFileExtension\n \u003e \n \u003e [filter \"project:bar branch:bar-stable-42\"]\n \u003e commiter \u003d ldap/GerritAdmins\n \u003e disable \u003d blockedContentType\n\nYes, agreed and like it.\n\n@Saša what do you think?",
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d6bd38_b65a4892",
        "filename": "src/main/resources/Documentation/config.md",
        "patchSetId": 5
      },
      "lineNbr": 274,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-01-16T07:41:50Z",
      "side": 1,
      "message": "Apologies, I misread your comment.\n\nIt is actually possible to define your scenario with the current configuration system: every project has its own project.config with its own uploadvalidator policy associated.\n\nProject: foo (refs/meta/config:project.config)\n\n[plugin \"uploadvalidator\"]\n  skipBranch \u003d refs/heads/foo-stable-42\n  skipGroup \u003d ldap/ReleaseManagers\n  skipValidation \u003d blockedFileExtension\n\nProject: bar (refs/meta/config:project.config)\n\n[plugin \"uploadvalidator\"]\n  skipBranch \u003d refs/heads/bar-stable-42\n  skipGroup \u003d ladp/GerritAdmins\n  skipValidation \u003d blockedContentType\n\nWhat isn\u0027t possible is to block two type of validations for two different groups on two different branches on the *same* project.\n\nDo you have such a use-case?\n(you or Saša)\n\nAgain, the one we have is much simpler and global than that.",
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d37948_5542cca6",
        "filename": "src/main/resources/Documentation/config.md",
        "patchSetId": 5
      },
      "lineNbr": 274,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-01-16T12:24:04Z",
      "side": 1,
      "message": "This shows the limitation(s) of storing plugin config inside the project.config. We would need to invent new keywords like:\n\n  skipGroupForBlockedFileExtention \u003d ldap/GerritAdmins\n\nand this would become very ugly.\n\nIt looks like skipBranch/Group/Validation from project.config would be possible to easily migrate to a new format. If this feature is urgent for Luca then I am fine with it for now.",
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d6bd38_56e77491",
        "filename": "src/main/resources/Documentation/config.md",
        "patchSetId": 5
      },
      "lineNbr": 274,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-01-16T12:24:04Z",
      "side": 1,
      "message": "Refactoring the plugin to use own configuration file is something that probably needs to be done yesterday :-) considering how many options are available.\n\nDifferently from the reviewers.config in the reviewers plugin which is a global configuration under etc/reviewrs.config, the uploadvalidator.config would exist under refs/meta/config:uploadvalidator.config.\n\nThe discussion on the format of the uploadvalidator.config is something that deserves own change and discussion and shouldn\u0027t be done as a side effect of this change, IMO. For example I am not sure that the proposed format is the best one as uploadvalidator.config is already project local and having a project:xxx in the filter seems redundant and confusing. Maybe we need a fully different format where config sections are named after validation checks:\n\n  [blockFileExtension \"branch:foo\"]\n    skip \u003d Administrators\n  [blockedContentType]\n    binaryType \u003d application/zip\n    binaryType \u003d ...\n\netc... However, let\u0027s discuss that new format in its own change.\n\nAnother thing to keep in mind is that when we move a plugin\u0027s own config file then we will have to write\nown GWT UI code for the general preferences page. The auto-generated UI code works only for plugin config which is stored in the project.config, unless I missed something in the newer development.",
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d37948_154c54d6",
        "filename": "src/main/resources/Documentation/config.md",
        "patchSetId": 5
      },
      "lineNbr": 274,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-16T12:34:03Z",
      "side": 1,
      "message": "\u003e Another thing to keep in mind is that when we move a plugin\u0027s own config file then we will have to write\nown GWT UI code for the general preferences page. The auto-generated UI code works only for plugin config which is stored in the project.config, unless I missed something in the newer development.\n\nYes, you are absolutely right here.",
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d6bd38_168fbcbd",
        "filename": "src/main/resources/Documentation/config.md",
        "patchSetId": 5
      },
      "lineNbr": 274,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-01-16T14:10:39Z",
      "side": 1,
      "message": "David, Saša, thanks for the feedback. I am definitely in favour in redesigning the configuration with its own config format in a follow-up change.\n\nAt the moment, I would be grateful if you could review the current as-is and then move on :-)\n\nLuca.",
      "revId": "5585789e461492d77b3100911e38a5604e52f532",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}